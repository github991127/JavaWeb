⚫●◽★
——————————————————————
黑马程序员2023新版JavaWeb开发教程，实现javaweb企业开发全流程
https://www.bilibili.com/video/BV1m84y1w7Tb/?p=6
——————————————————————
HTML和CSS
⚫P6Day01-05. HTML-新浪新闻-实现标题
●!快速生成结构标签
●<body>内添加标签及其属性。例如<img src="img/news_logo.png" width="80%" >

⚫P7Day01-06. HTML-新浪新闻-实现标题
●添加样式的三种方式
◽行内样式：标签加上style属性
◽内嵌样式：head内添加<style>标签，标签内给不同标签定义样式
◽外联样式：定义<link>标签，通过href属性引入外部css文件（内嵌样式写成文件）

⚫P8Day01-07. HTML-新浪新闻-实现标题
●<style>标签的三种选择器，范围小的优先
◽元素选择器：标签名称，对所有标签生效
◽类选择器：.class属性值，对指定同名class的标签生效
◽id选择器：#id属性值，对指定同名id的标签生效

⚫P11Day01-10. HTML-新浪新闻-实现正文
●盒子模型：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）
◽div标签：独占一行。宽度默认是父元素的宽度，高度默认由内容撑开。可以设置宽高（width、height）
◽span标签：一行多个。宽度和高度默认由内容撑开。不可以设置宽高（width、height）

⚫P12Day01-11. HTML-表格标签
表格<table> 可以包裹多个行 <tr>，行 <tr>可以包裹多个单元格<td>。而如果是表头单元格, 可以使用<th>默认加粗居中

⚫P13Day01-12. HTML-表单标签
表单<form>，属性method规定用于发送表单数据的方式
◽GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username=Tom&age=12，大小有限制。
◽POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。

⚫P14Day01-13. HTML-表单项标签
表单<form>可以包裹多个表单项，有三种类型：
◽<input>，通过type属性控制输入形式，最常用
◽<select>，定义下拉列表。<option> ，定义列表项
◽<textarea>，定义文本域

HTML常用关键字查阅
https://www.w3school.com.cn/index.html
——————————————————————
JavaScript
⚫P16Day02-02. JS-引入方式
◽内嵌样式：<body>底部添加<script></script>标签，标签内编写JS代码
◽外联样式：引入外部js文件<script src="js/demo.js"></script>（内嵌样式写成文件）

⚫P17Day02-03. JS-基础语法-书写语法
window.alert() ：警告框
document.write() ：在HTML 输出内容
console.log() ：写入浏览器控制台

⚫P18Day02-04. JS-基础语法-变量
var： 早期ECMAScript5中用于变量声明的关键字
let： ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效
const： 声明常量的，常量一旦声明，不能修改

⚫P19Day02-05. JS-基础语法-数据类型&运算符
●类型
number 数字（整数、小数、NaN(Not a Number)）
string 字符串，单双引皆可
boolean 布尔。true，false
null 对象为空
undefined 当声明的变量未初始化时，该变量的默认值是 undefined
●比较
==：只比较值是否相等，不区分数据类型，哪怕类型不一致，==也会自动转换类型进行值得比较
===：不光比较值，还要比较类型，如果类型不一致，直接返回false
0,null,undefined,"",NaN理解成false,反之理解成true

⚫P20Day02-06. JS-函数
定义函数的2种语法
◽function
function 函数名(参数1,参数2..){
要执行的代码
}
◽var
var functionName = function (参数1,参数2..){ 
 //要执行的代码
}

⚫P21Day02-07. JS-对象-Array数组
●JavaScript中的3大对象
◽基本对象，Array，JSON，String
◽BOM对象，主要是和浏览器相关的几个对象
◽DOM对象，将html的每一个标签都封装成一个对象

●Array数组
◽定义
[]
◽属性
length 设置或返回数组中元素的数量
◽方法
forEach() 遍历数组中的每个有值得元素，并调用一次传入的函数
push() 将新元素添加到数组的末尾，并返回新的长度
splice() 从数组中删除元素

⚫P22Day02-08. JS-对象-String字符串
◽定义
“”
◽属性
length 字符串的长度
◽方法
charAt() 返回在指定位置的字符。
indexOf() 检索字符串。
trim() 去除字符串两边的空格
substring() 提取字符串中两个指定的索引号之间的字符。

⚫P23Day02-09. JS-对象-JSON
◽自定义对象
var 对象名 = {
属性名1: 属性值1,
属性名2: 属性值2,
属性名3: 属性值3,
函数名称: function(形参列表){}
};
◽json对象
{
"key":value,
"key":value,
"key":value
}
◽json字符串和json对象的转换
JSON.parse(jsonstr)
JSON.stringify(obj)

⚫P24Day02-10. JS-对象-BOM
●浏览器对象模型BOM的5大对象
Window 浏览器窗口对象
Navigator 浏览器对象
Screen 屏幕对象
History 历史记录对象
Location 地址栏对象

●Window对象
◽属性
history 用于获取history对象
location 用于获取location对象
Navigator 用于获取Navigator对象
Screen 用于获取Screen对象
◽方法（可省略Window对象）
alert() 显示带有一段消息和一个确认按钮的警告框。
comfirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。
setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。
setTimeout() 在指定的毫秒数后调用函数或计算表达式。

●Location对象
◽属性
href 获取浏览器地址栏信息

⚫P25Day02-11. JS-对象-DOM
●文档对象模型DOM的5大对象，用于封装HTML内容
Document：整个文档对象
Element：元素对象
Attribute：属性对象
Text：文本对象
Comment：注释对象

●对象获取
document.getElementById() 根据id属性值获取，返回单个Element对象
document.getElementsByTagName() 根据标签名称获取，返回Element对象数组
document.getElementsByName() 根据name属性值获取，返回Element对象数组
document.getElementsByClassName() 根据class属性值获取，返回Element对象数组

●对象属性修改

⚫P27Day02-13. JS-事件-事件绑定&常见事件
●事件绑定的2种方式
◽通过html标签中的事件属性进行绑定
<input type="button" id="btn1" value="事件绑定1" onclick="on()">
◽通过DOM中Element元素的事件属性进行绑定
document.getElementById('btn2').onclick = function(){
alert("按钮2被点击了...");
}

●常见事件
onclick 鼠标单击事件
onblur 元素失去焦点
onfocus 元素获得焦点
onload 某个页面或图像被完成加载
onsubmit 当表单提交时触发该事件
onmouseover 鼠标被移到某元素之上
onmouseout 鼠标从某元素移开

——————————————————————
⚫P29Day02-15. Vue-概述
●前端开发思想MVVM(Model-View-ViewModel)
Model: 数据模型，特指前端中通过请求从后台获取的数据。Ajax
View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据。ElementUI
ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上。Vue

●快速入门
◽<head>部分，编写<script>标签来引入vue.js文件
◽<script>部分，js代码区域定义vue对象，对变量实现双向动态绑定
◽<body>部分，编写视图，其中{{}}是插值表达式，用来将vue对象中定义的model展示到页面上

●vue对象常见属性
◽el: 用来指定哪儿些标签受 Vue 管理。 该属性取值 #app 中的 app 需要是受管理的标签的id属性值
◽data: 用来定义数据模型
◽methods: 用来定义函数

⚫P30Day02-16. Vue-指令-v-bind&v-model&v-on
●vue通过大量的指令来实现数据双向绑定到视图（vue对象中定义data或methods，标签中调用）。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。双向绑定的作用：可以获取表单的数据的值，然后提交给服务器。

●vue指令
v-bind 为HTML标签绑定属性值，如设置 href , css样式等
v-model 在表单元素上创建双向数据绑定
v-on 为HTML标签绑定事件
v-if 条件性的渲染某元素，判定为true时渲染,否则不渲染
v-else
v-else-if
v-show 根据条件展示某元素，区别在于切换的是display属性的值
v-for 列表渲染，遍历容器的元素或者对象的属性

⚫P31Day02-17. Vue-指令-v-if&v-show&v-for
v-if，v-else-if（0-n个），v-else，分别用在不同标签中
v-show，渲染但隐藏
v-for，可获取元素和索引

⚫P33Day02-19. Vue-生命周期
●vue的生命周期是vue对象从创建到销毁的过程。包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法（钩子方法）
beforeCreate 创建前
created 创建后
beforeMount 挂载前
mounted 挂载完成
beforeUpdate 更新前
updated 更新后
beforeDestroy 销毁前
destroyed 销毁后

●mounted方法
挂载完成，Vue初始化成功，HTML页面渲染成功。以后我们一般用于页面初始化自动的ajax请求后台数据
在vue对象中定义，与el，data，methods平级

⚫P34Day03-01. Ajax-介绍
●Ajax作用
与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。
异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用的校验等等。

⚫P35Day03-02. Ajax-Axios2
●Axios（对原生的AJAX进行封装）快速入门
◽<head>部分，编写<script>标签来引入Axios.js文件
◽<script>部分，Axios请求方法，对变量实现双向动态绑定
◽<body>部分，编写视图，其中{{}}是插值表达式，用来将vue对象中定义的model展示到页面上

●Axios请求方法
method属性：用来设置请求方式的。取值为 get 或者 post。
url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名=参数值&参数名2=参数值2。
data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为data 属性的值。
then() 需要传递一个匿名函数作为回调函数，在成功响应后调用。回调函数中的resp参数是对响应的数据进行封装的对象，通过resp.data可以获取到响应的数据。

●Axios请求方法别名
axios.get(url [, config]) 发送get请求
axios.delete(url [, config]) 发送delete请求
axios.post(url [, data[, config]]) 发送post请求
axios.put(url [, data[, config]]) 发送put请求

●综合案例

——————————————————————

⚫P36Day03-03. 前端工程化
●流程
1. 需求分析：首先我们需要阅读需求文档，分析需求，理解需求。
2. 接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等
3. 前后台并行开发：各自按照接口文档进行开发，实现需求
4. 测试：前后台开发完了，各自按照接口文档进行测试
5. 前后段联调测试：前段工程请求后端工程，测试功能

●api 管理平台YAPI
地址：http://yapi.smart-xwork.cn/

⚫P37Day03-04. 前端工程化-环境准备
●工程化开发
前端工程化使用Vue官方提供的脚手架Vue-cli
Vue-cli需要依赖NodeJS，NodeJS是前端工程化依赖的环境

●npm配置镜像
设置淘宝镜像源
npm config set registry https://registry.npm.taobao.org
测试
npm config get registry
⚫P38Day03-05. 前端工程化-Vue项目
●创建vue项目
vue ui
在项目地址cmd，打开图形化界面创建

●运行vue项目
VScode中点击NPM脚本运行

●更换vue项目端口号
修改vue.config.js文件的内容：
devServer:{
port:7000
}

⚫P39Day03-06. 前端工程化-Vue项目开发流程
●.vue组件包含3个部分：
template: 模板部分，主要是HTML代码，用来展示页面主体结构的
script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的
style: css样式部分，主要通过css样式控制模板的页面效果得

⚫P40Day03-07. Element-快速入门
●Element
vue侧重于VM开发的，主要用于数据绑定到视图的
ElementUI侧重于V开发的前端框架，主要用于开发美观的页面的
官网：https://element.eleme.cn/#/zh-CN

●快速入门
◽当前项目下载组件库
npm install element-ui@2.15.3
◽在main.js这个入口js文件中引入ElementUI的组件库
import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';
Vue.use(ElementUI);
◽创建一个vue组件文件
复制指定代码
◽默认访问的根组件src/App.vue中引入我们自定义的组件
<element-view></element-view>

⚫P45Day03-12. Element-案例-基本页面布局

⚫P48Day03-15. vue路由
●流程
首先VueRouter根据我们配置的url的hash片段和路由的组件关系去维护一张路由表
然后我们页面提供一个<router-link>组件,用户点击，发出路由请求
接着我们的VueRouter根据路由请求，在路由表中找到对应的vue组件
最后VueRouter会切换<router-view>中的组件，从而进行视图的更新

●快速入门
创建项目时，已经勾选了路由功能
在src/router/index.js文件中定义路由表
.vue中编写router-link
内容展示区域App.vue中定义route-view
路由配置对应的路由组件routes，映射url哈希与.vue

⚫P49Day03-16. 打包部署
●打包
VS Code的NPM脚本中提供的build按钮，生成一个dist目录
●部署
dist目录下内容拷贝到nginx的html目录，nginx.exe文件来启动nginx
nginx服务器的端口号是80，所以启动成功之后，我们浏览器直接访问http://localhost:80
●更改端口号
如果80端口被占用，我们需要通过conf/nginx.conf配置文件来修改端口号
查询当前端口占用的进程
netstat -ano | findStr 80
